// Copyright 2010-2013 (c) IeAT, Siemens AG, AVANTSSAR and SPaCIoS consortia.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.avantssar.aslanpp;

import java.io.IOException;

import javax.jws.WebService;

import org.antlr.runtime.RecognitionException;
import org.avantssar.commons.TranslatorOptions;

/**
 * Translator from ASLan++ specifications into ASLan specifications.
 */
@WebService
public interface ASLanPPConnector {

	/**
	 * Retrieves the title of the translator program.
	 * 
	 * @return A String containing the title of the translator program.
	 */
	String getTitle();

	/**
	 * Retrieves the version of the translator program.
	 * 
	 * @return A String containing the version of the translator program.
	 */
	String getVersion();

	/**
	 * Returns the vendor of the translator program.
	 * 
	 * @return A String containing the vendor of the translator program.
	 */
	String getVendor();

	/**
	 * Returns a line containing the vendor, the program title and the version.
	 * 
	 * @return A String that holds the vendor, the program title and the
	 *         version, separated by spaces.
	 */
	String getFullTitleLine();

	/**
	 * Translates an ASLan++ specification into an ASLan specification.
	 * 
	 * @param options
	 *            A set of options for customizing the behavior of the
	 *            translator. It can be <b>null</b>, which means that the
	 *            translator will use a set of default options.
	 * @param fileName
	 *            A String containing the full path name of the ASLan++ 
	 *            specification to be translated, or null if not available
	 * @param aslanppSpecs
	 *            An array of Strings containing the ASLan++ specification to be
	 *            translated, and any imported specifications, if it is the
	 *            case.
	 * @return The resulted ASLan specification together with possible errors
	 *         and warnings. If errors appeared during the translation, then the
	 *         returned ASLan specification may be null.
	 * @throws IOException 
	 * @throws NullPointerException 
	 * @throws RecognitionException 
	 */
	TranslatorOutput translate(TranslatorOptions options,  String fileName, String... aslanppSpecs) throws NullPointerException, IOException, RecognitionException;

	/**
	 * Translates back to ASLan++ the analysis result given by the validation
	 * platform for an ASLan specification. The ASLan specification that was
	 * analyzed must have been generated by the ASLan++ connector.
	 * 
	 * @param aslanSpec
	 *            The ASLan specification that was analyzed.
	 * @param analysisResult
	 *            The analysis result given by the validation platform.
	 * @return The analysis result translated back to ASLan++.
	 */
	TranslatorOutput translateAnalysisResult(String aslanSpec, String analysisResult);

}
