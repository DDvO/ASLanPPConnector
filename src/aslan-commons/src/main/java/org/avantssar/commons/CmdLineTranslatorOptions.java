// Copyright 2010-2013 (c) IeAT, Siemens AG, AVANTSSAR and SPaCIoS consortia.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.avantssar.commons;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.URL;

import org.kohsuke.args4j.CmdLineParser;
import org.kohsuke.args4j.Option;
import org.kohsuke.args4j.spi.StringArrayOptionHandler;

public class CmdLineTranslatorOptions extends TranslatorOptions {

	private final CmdLineParser parser;
	private final String jarFile;

	public CmdLineTranslatorOptions(Class<?> clz) {
		CmdLineParser.registerHandler(String[].class,
				StringArrayOptionHandler.class);
		parser = new CmdLineParser(this);
		jarFile = loadJarName(clz, getDefaultJarName());
	}

	protected String getDefaultJarName() {
		return "aslanpp-connector.jar";
	}

	public CmdLineParser getParser() {
		return parser;
	}

	@Option(name = "-h", aliases = "--help", usage = "Show help.")
	private boolean showHelp;

	@Option(name = "-v", aliases = "--version", usage = "Display version information.")
	private boolean showVersion;

	@Option(name = "-o", aliases = "--output", metaVar = "OUTPUT_FILE", usage = "Send output to the specified file instead of stdout.")
	private File out;

	@Option(name = "-ar", aliases = "--analysis-result", metaVar = "ANALYSIS_RESULT", usage = "Translate back to ASLan++ the analysis result given by a backend on an ASLan specification that was generated by translation from ASLan++. A file must be provided that holds the analysis result given by the validation platform.")
	private File analysisResult;

	public boolean isShowHelp() {
		return showHelp;
	}

	public void setShowHelp(boolean showHelp) {
		this.showHelp = showHelp;
	}

	public File getOut() {
		return out;
	}

	public void setOut(File out) {
		this.out = out;
	}

	public boolean isShowVersion() {
		return showVersion;
	}

	public void setShowVersion(boolean showVersion) {
		this.showVersion = showVersion;
	}

	public File getAnalysisResult() {
		return analysisResult;
	}

	public void setAnalysisResult(File analysisResult) {
		this.analysisResult = analysisResult;
	}

	public void showShortHelp(PrintStream out) {
		showSingleLineUsage(out);
		out
				.println("Run the program with the -h or --help option for details about available options.");
	}

	public void showLongHelp(PrintStream out) {
		showSingleLineUsage(out);
		out.println("Available options:");
		out.println();
		parser.printUsage(out);
		out.println();
		out.println();
		InputStream is = CmdLineTranslatorOptions.class
				.getResourceAsStream("/help.txt");
		if (is != null) {
			BufferedReader br = new BufferedReader(new InputStreamReader(is));
			String line;
			try {
				while ((line = br.readLine()) != null) {
					out.println(line);
				}
			} catch (Exception e) {
				// ignore
				// Debug.logger.error(
				// "Exception while loading additional help information.",
				// e);
			}
		}
	}

	public void showSingleLineUsage(PrintStream out) {
		out.print("Usage: java -jar ");
		out.print(jarFile);
		parser.printSingleLineUsage(out);
		out.println();
		out.println();
	}

	private String loadJarName(Class<?> clz, String defaultJarName) {
		String pathToOurSpecificResource = clz.getCanonicalName();
		pathToOurSpecificResource = "/"
				+ pathToOurSpecificResource.replace('.', '/') + ".class";
		URL u = clz.getResource(pathToOurSpecificResource);
		if (u.getFile().indexOf("!") > -1) {
			String[] parts = u.getFile().split("!");
			File f = new File(parts[0].substring(parts[0].indexOf(":") + 1));
			return f.getName();
		}
		return defaultJarName;
	}
}
